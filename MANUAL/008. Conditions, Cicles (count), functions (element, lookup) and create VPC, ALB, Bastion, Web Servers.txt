---------------------------------------------------
Условия, цыклы (count), функции (element, lookup).
Создание VPC, Bastion и Web Server.
--------------------------------------------------

Обговорим весь функционал, который мы использовали в данном проекте, а потом
опишем проект.

-------
Условия
-------

https://www.terraform.io/language/expressions/conditionals

https://www.terraform.io/language/expressions/operators

Рассмотрим маленький пример:

variable "env" {
  type = string
  default = "prod"
}

resource "aws_instance" "some_instance" {
  ...
  instance_type = var.env == "prod" ? "t2.large" : "t2.micro"
  ...
}

Если переменная - env будет иметь значние - prod, то instance_type будет - t2.large,
если будет какое либо другое значение, то t2.micro.

-------------------------
Функции - element, lookup
-------------------------

https://www.terraform.io/language/functions/lookup

https://www.terraform.io/language/functions/element

На самом деле мы можем обойтись и без этих функции. Если коротко, то функция
lookup - это для того, чтобы из map вытаскивать значение по ключу, а функция
element - для того, чтобы из list вытаскивать значение по индексу. Это все можно делать и
без этих функций, но мы решили их использовать в нашем проекте т.к. они широко
используются общественностью.

Вот примеры для lookup:

variable "volume_type" {
  type = map(string)
  default = {
    dev = "gp2",
    prod = "io1",
  }
}

Обычный вариант использования map:

resource "aws_instance" "some_instance" {
  ...
  # Выберем io1
  instance_type = var.volume_type["prod"]
  ..
}

Вариант использования map с помощью функции lookup:

resource "aws_instance" "some_instance" {
  ...
  # Выберем io1
  instance_type = lookup(var.volume_type, "prod")
  ..
}


Вот пример для element:

variable "all_subnet_id" {
  type = list(string)
  default = [
    "subnet-000c2008b7496a3b7",
    "subnet-0646580d441af171c",
    "subnet-053fd4df99fbbb0f9"
  ]
}

Обычный вариант использования list:

resource "aws_instance" "some_instance" {
  ...
  # Выберем subnet-000c2008b7496a3b7
  subnet_id = var.all_subnet_id[0]
  ..
}

Вариант использования list с помощью функции element:

resource "aws_instance" "some_instance" {
  ...
  # Выберем subnet-000c2008b7496a3b7
  subnet_id = element(var.all_subnet_id, 0)
  ..
}



-------------
Циклы - count
-------------

https://www.terraform.io/language/meta-arguments/count


Например, нам нужно создать 2 ec2 instance'а:

resource "aws_instance" "some_instance_1" {
  ...
  tags = {
    Name = "some_instance_1"
  }
}

resource "aws_instance" "some_instance_2" {
  ...
  tags = {
    Name = "some_instance_2"
  }
}

А что если нам нужно создать 20 instance'ов? Для этого можно использовать цикл - count.
Кстати, данный цикл есть у всех ресурсов.

resource "aws_instance" "some_instance" {
  count = 20
  ...
  tags = {
    Name = "some_instance_${count.index + 1}"
  }
}

count.index - это номер элемента (цикла). В нашем случае от 0 до 19 (всего 20-ть).

Выражение ${count.index + 1} нужно для того, чтобы имя первого ресурса было -
"some_instance_1", а не "some_instance_0".


В проекте, вы можете заметить функцию - length. Она вычисляет количество элементов
в list'е. Причем она правильно это делает т.е. от 0-ля.

Например, нас нужно создавать пользователей:

variable "users" {
  type = list(string)
  default = [
    "user1",
    "user2",
    "user3",
    "user4",
    "user5"
  ]
}

resource "aws_iam_user" "users" {
  count = length(var.users)
  name = element(var.users, count.index)
}

Напоминаем, count.index - это номер элемента. В нашем случае от 0 и до 4 (всего 5 элементов).

Кстати, напомним, что можно было бы не использовать функцию element, а записать так:

name = var.users[count.index]

Тоже бы сработало.

---------------------------------------------------
Вывод ресурсов сделанных с помощью count и цикл for
---------------------------------------------------

Это очень важный момент т.к. бывает, что вызывает некоторую путоницу. Поэтому мы
решили даже выделить отдельно его.

Мы знаем, что можем вывести информацию о ресурсах  созданныхв одном проекте с
помощью output таким образом:

resource "aws_iam_user" "user1" {
  name = user1
}

resource "aws_iam_user" "user2" {
  name = user1
}

resource "aws_iam_user" "user3" {
  name = user1
}

output "user1_id" {
  value = aws_iam_user.user1.id
}

output "user2_id" {
  value = aws_iam_user.user2.id
}

output "user3_id" {
  value = aws_iam_user.user3.id
}

Но, что если бы мы этих 3-их пользователей создали с помощью цикла? Вывод информации,
о них, например их id, нужно делать несколько по другому:

variable "users" {
  type = list(string)
  default = [
    "user1",
    "user2",
    "user3",
  ]
}

resource "aws_iam_user" "users" {
  count = length(var.users)
  name = element(var.users, count.index)
}

output "users_id" {
  value = aws_iam_user.users[0].id
}

output "users_id" {
  value = aws_iam_user.users[1].id
}

output "users_id" {
  value = aws_iam_user.users[2].id
}

Более ценно, выводить определенную информацию о всех созданных aws рсурсов с помощью
цикла. Она выводится в списке (list).

Первый вариант (часто используют)

output "users_id" {
  value = aws_iam_user.users[*].id
}

Второй вариант:

output "users_id" {
  value = [
    for u in aws_iam_user.users :
    u.id
  ]
}

В проекте мы будем часто это использовать первый вариант.

-------------------------
Дополнение:

Можно сделать map, например из id и unique_id:

output "users_id_and_unique_id" {
  value = [
    for u in aws_iam_user.users :
    u.id => u.unique_id
  ]
}

А так же можно делать условия (фильтры). Например, выведем имена пользователей, если количество
символом в имени более - 2:

output "users_name_gt_2" {
  value = [
    for u in aws_iam_user.users :
    u.name
    if length(u.name) > 2
  ]
}


------------------------------------------------
Создание VPC, ALB и Bastion Host с Web серверами
------------------------------------------------

В чем суть? Создадим VPC, подсети приватные и публичные. Публичные - это те, к
ресурсам которых может быть доступ из интернет. Приватные - это те,
к которым из интернета доступа нет, но ресурсы имеют доступ в интернет. Првда, в нашем
случае, мы сделаем приватную сеть без доступа в интернет т.к. для интернета нужен
Nat Gateway, а он работает совместно с EIP, а он стоит денег. Мы же не хотим тратить
деньги на инфраструктуру в учебных целях.

Будем создавать столько приватных и публичных сетей, сколько укажем cidr блоков.
Укажем в переменных public_subnet_cidr_blocks, private_subnet_cidr_blocks столько
cidr блоков, сколько AZ в регионе. Т.к. мы создаем VPC в регионе eu-central-1, где
3-и AZ. Создадим по 3-и cidr блоков для двух типов сетей. Это мы будем делать с помощью
цикла count.

Все что касается VPC, кроме групп безопасности, мы опишем в файле main_network.tf.

Мы создадим два web сервера с использованием цикла count, которые будут находиться
в приватных сетях. Причем в разных AZ.

В качестве Web сервера используем утилиту nc. Т.к. данные сервера будут находиться
а приватных сетях мы не сможем устанловить реальных LEMP, как мы это делаи в предыдущих пректах.
Конечно же в реальных условиях, можно было бы заранее создать AMI с установленным
LEMP, но это уже детали. Для учебных целях, нам подойдет и так. Т.е. nc установлен
по-умолчанию, только на ubuntu, то мы используем для этих целей именно ее.

Так же, в зависимости от значения переменной env, будем создавать Bastion Host, который
по понятным причинам находится в публичной сети. Для этого будем использовать conditions.
Если значение переменной env будет "dev", то будем создавать Bastion Host, а если другое значение,
то не будем. Например, в производственной среде Bastion host не обязателен т.к.
уже все будет отработано и оттестировано и удаленный доступ к Web серверам не обязателен.

Трафик к Web серверам будет балансироваться с помощью ALB, который, естественно, находится
во всех публичных сетях региона данной VPC, т.е. во всех AZ.

Сетевое взаимоотношение сделаем такое. Создадим группу безопасности bastion_sg, которую
применим для Bastion Host. Она принемает ssh трафик от всех. К ALB применем
группу безопасности alb_sg, которая принемает http, https трафик от всех. На Web сервера
применем группу безопасности all_sg, которая принемает весь трафик от ALB и Bastion Host'а.

Все что связано с ALB, Web серверами, Bastion host'ом и групп безопасности, мы опишем
в main.tf.

В файле data.tf мы описываем изъятие всей необходимой информации для построения инфраструктуры.

Выведем всю необходимую и интересную информацию с помощью outputs.tf

В фале variable.tf находятся все необходимые переменные.




Подробней стоит остановиться на файле main_network.tf.

Мы создали VPC aws_vpc (main) в регионе eu-central-1 указав cidr блок. Напонимаем, что
регион мы настраиваем в переменной окружения AWS_DEFAULT_REGION или в настрйоках провайдера.
Далее создали internet gateway aws_internet_gateway (main) и привязали его к нашей VPC.
Его будут использовать публичные сети для интернет.

Создали подсети aws_subnet (public, private). Указали им VPC и соответствующие
cidr блоки. Причем использовали функцию length, для подсчета количества элементов в переменной
(cidr блоков), и count для создания стольких подсетей сколько cidr блоков. Ну, и расположили их
в разных AZ. У публичной сети параметр

map_public_ip_on_launch = true

т.к. он говорит о том, чтобы выдавался публичный ip адрес. Естественно, что приватных
сетей этот параметр в значении - false.

Далее, создали таблицы маршрутизации (aws_route_table): одну (public) для публичных сетей
и одну (private) для приватных. Различаются они лишь одним маршрутом в публичной
таблице маршрутизации, у которого есть маршрут aws_route (to_igw) через internet gateway.

Ну, и ассоциировали с помощью ресурса aws_route_table_association (publicб private)
соответствующие подсети с соотведствующими таблицами маршрутизации. Действовали похожим образом,
как и с подсетями. С помощью length подсчитали количество подсетей и создадли для каждой
ассоциацию с соотетсвующей таблицей маршрутизации.



Со всеми файлами проект можно ознакомится в директории с проектом


$ mkdir ./008_Create_VPC_ALB_Bastion_and_Web_Servers; cd ./008_Create_VPC_ALB_Bastion_and_Web_Servers

$ export AWS_ACCESS_KEY_ID=<your access key id>
$ export AWS_SECRET_ACCESS_KEY=<your secret access key>
$ export AWS_DEFAULT_REGION=<your default region>

$ terraform plan

$ terraform apply

...

Outputs:

alb_dns = "alb-1509612377.eu-central-1.elb.amazonaws.com"
all_private_subnets = tolist([
  "subnet-0770e18e140a11cb7",
  "subnet-0b740487cd89e824f",
  "subnet-07f54ac65841bfb14",
])
all_public_subnets = tolist([
  "subnet-030998d8f67ffc176",
  "subnet-0d53df2e9702e330c",
  "subnet-0d7b5ea28273cdec3",
])
bastion_public_ip = "3.67.34.84"
lemp_private_ips = tolist([
  "10.0.2.117",
  "10.0.1.208",
])
vpc = "vpc-019400a279a9c92e0"

Не забываем удалять инфрмаструктуру

$ terraform destroy

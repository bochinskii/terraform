
-------------------------------------------------------------------------
Генерирование паролей (random_string) и хранение паролей в Parametr Store
-------------------------------------------------------------------------

https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/string

Если вам нужно сгегенрировать пароль, то можно воспользоваться - random_string.

Рассмотрим пример. Нам нужно сгенерировать пароль и сохранить его для дальнейшего
использования в Parametr Store.

$ mkdir ./007_Random_string_and_Parameter_Store; cd ./007_Random_string_and_Parameter_Store

$ export AWS_ACCESS_KEY_ID=<your access key id>
$ export AWS_SECRET_ACCESS_KEY=<your secret access key>
$ export AWS_DEFAULT_REGION=<your default region>

Оставим "за кадром" создание конфигурации провайдера.

$ terraform init

$ touch sensitive.tf

----------------------------
Генеирование рандомных строк
----------------------------

Ознакомится с данным файлом можно в директории с проектом.

Рассмотрим вот эти строчки:

resource "random_string" "random" {
  length           = 12
  special          = true
  override_special = "#$"
}

output "password" {
  value = random_string.password.result
}

length - длина строки;
special - включает в пароль специальные символы;
override_special - указывает какие специальные символы можно использовать.

С помощью output мы выводи данную строку на экран.

$ terraform apply

...
Outputs:

password = "J2fMMMly5dIM"

Удалим нашу инфраструктуру (если так можно выразится). Зачем это нужно делать на
данном этапе, позже увидите.

$ terraform destroy

-------------------------------------------------------
Сохранение рандомной строки на пароль в Parametr Store
------------------------------------------------------

https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ssm_parameter

https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ssm_parameter

Добавим в tf файл, строки касающиеся Parameter Store.

resource "aws_ssm_parameter" "password" {
  name        = "/dev/password"
  description = "Just a password"
  type        = "SecureString"
  value       = random_string.password.result

  tags = {
    Owner = "Denis Bochinskii"
    Environment = "DEV"
  }
}

data "aws_ssm_parameter" "password" {
  name = "/dev/password"

  depends_on = [aws_ssm_parameter.password]
}

output "password_ssm" {
  value = data.aws_ssm_parameter.password.value
  sensitive = true
}

Обязательным моментом является

depends_on = [aws_ssm_parameter.password]

Т.к. не явных зависимостей у data - password нет, а данные должны браться уже из
Parametr Store после того, как они туда попадут.

Интересный момент, что в данном случае в output - password_ssm обязательным параметром
является

sensitive = true

иначе terraform не даст выполнить команду apply. Данный парамет не даст вывести
на экран пароль. Вместо этого она пишет - <sensitive>.

$ terraform plan

$ terraform apply

...

Outputs:

password_rs = "Jmr10HfjirNM"
password_ssm = <sensitive>

Давайте запустим  apply снова

$ terraform apply
random_string.password: Refreshing state... [id=Jmr10HfjirNM]
aws_ssm_parameter.password: Refreshing state... [id=/dev/password]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

password_rs = "Jmr10HfjirNM"
password_ssm = <sensitive>

Что мы увидели? Оказывается random_string не генерирует пароль снова, как можно
было бы подумать.



Что же делать, если мы хотим поменять пароль ?Как заставить ресурс - random_string
сработать еще раз?

Есть параметр - keepers в random_string русурсе. Он содержит значение переменной,
если это значение изменится, то пароль сгенерируется снова. Ничего не понятно, на
практике будет ясно:

Приведем кусок кода

variable "revision_number" {
  type = number
  default = 0
}

resource "random_string" "password" {
  length           = 12
  special          = true
  override_special = "#$"

  keepers = {
    keeper1 = var.revision_number
  }
}

Запустим комманду - apply.

$ terraform apply

Outputs:

password_rs = "cH6LAeFNgt1w"
password_ssm = <sensitive>


Мы видим, что получили пароль "cH6LAeFNgt1w" и занесли его в Parameter Store.

Запустим еще раз

$ terraform apply

Outputs:

password_rs = "cH6LAeFNgt1w"
password_ssm = <sensitive>


Ничего не изменилось т.к. keeper1 на момент повторного запуска команды apply имеет
такое же значение как и переменная revision_number. Чтобы пароль изменился, нужно изменить
переменную revision_number

Двайте изменим переменную revision_number на значение - 1

variable "revision_number" {
  type = number
  default = 1
}

resource "random_string" "password" {
  length           = 12
  special          = true
  override_special = "#$"

  keepers = {
    keeper1 = var.revision_number
  }
}

Запустим команду - apply

$ terraform apply

Outputs:

password_rs = "sJSuEAafSkc#"
password_ssm = <sensitive>

Теперь пароль изменился.

Таким образом, если нужно изменить пароль еще раз, то можно изменить переменную на значение
- 2, потом на - 3 и т.к. Удобно. Не зря мы назвали данную переменную как revision_number.

Конечно же не обязательно увеличивать на еденицу, можно что угодно там писать. Просто так удобней.

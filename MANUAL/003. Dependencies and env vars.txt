-----------------------------------------------
Зависимости и использование перемнных окружения
-----------------------------------------------

Создадим новый проект

$ mkdir ./002_Create_LEMP_file; cd ./002_Create_LEMP_file

Оставим "за кадром" создание конфигурации провайдера.

Экспортируем все необходимые переменные.

$ export AWS_ACCESS_KEY_ID=<your access key id>
$ export AWS_SECRET_ACCESS_KEY=<your secret access key>
$ export AWS_DEFAULT_REGION=<your default region>

Экспорт данной переменной, будет объяснен ниже.

$ export TF_VAR_ssh_port=<your custome ssh port number>

Просмотрим зависимости на примере создания LEMP сервера к которому будет "привязаны"
две новосозданные группы безопасности.

$ terraform init

$ touch main.tf

variable "ssh_port" {}

resource "aws_instance" "my_lemp" {
  ami = "ami-05f5f4f906feab6a7"
  instance_type = "t2.micro"

  key_name = "bochinskii_Frankfurt_2"

  vpc_security_group_ids = [
    aws_security_group.my_lemp_web.id,
    aws_security_group.my_lemp_ssh.id
  ]

  availability_zone = "eu-central-1a"
  subnet_id = "subnet-000c2008b7496a3b7"
  user_data_base64 = file("../secret/user_data.base64.sh")

  root_block_device {
    volume_type = "gp3"
    volume_size = 10
    delete_on_termination = true
  }

  tags = {
    Name = "my_lemp"
    Owner = "Denis Bochinskii"
  }
}

resource "aws_security_group" "my_lemp_web" {
  name        = "my_lemp_web"
  description = "Allow Web traffic"
  vpc_id      = "vpc-03ccdbfd7272a7584"

  ingress {
    description      = "To HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "To HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "my_lemp_web"
    Owner = "Denis Bochinskii"
  }
}

resource "aws_security_group" "my_lemp_ssh" {
  name        = "my_lemp_ssh"
  description = "Allow Web traffic"
  vpc_id      = "vpc-03ccdbfd7272a7584"

  ingress {
    description      = "To SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "To custome SSH"
    from_port        = var.ssh_port
    to_port          = var.ssh_port
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "my_lemp_ssh"
    Owner = "Denis Bochinskii"
  }
}

В tf файле мы сперва укзали ресур aws_instance, а потом ресурсы aws_security_group.
Тем не менее мы создали автоматическую связь между aws_instance и aws_security_group
путем указания - aws_security_group.my_lemp_web.id и aws_security_group.my_lemp_ssh.id:

vpc_security_group_ids = [
  aws_security_group.my_lemp_web.id,
  aws_security_group.my_lemp_ssh.id
]

т.е. terraform просканировал tf файл и выяснил, что есть связь между ресурсами и таким образом
сначала создал группы безопасности, а потом уже ресурс с ec2 instance'ом.

********************************************
Заметка:

Рассмотрим как мы указали группы безопаности на примере одной - aws_security_group.my_lemp_web.id.
Эта запись состоит из названия ресурса (aws_security_group), его имени (my_lemp_web)
и одентификационного номера (id).

На самом деле можно "забрать" не только id, но и некоторые другие параметры.
Их можно найти в документации.

Если посмотреть на документацию по AWS - https://registry.terraform.io/providers/hashicorp/aws/latest/docs
то можно заметить, что документация о AWS сервисах, подразделяется на:
- resources
- data source
В resources описывается документация и параметры ресурса, а в data source
описывается то, что можно получить в качетсве переменной от созданного ресурса.

Вот data source документация например для группы безопасности -
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/security_group
********************************************

https://www.terraform.io/language/values/variables

Далее, рассмотрим использование переменных окружения в tf файле.
Например, мы не захотели, чтобы в tf файле был показан
кастомный ssh порт. Как мы вышли из положения?

Как вы видели выше мы экспортровали вот такую переменную - TF_VAR_ssh_port,
в которой указали номер порта. Чтобы ее использовать в tf файле,
мы указали var.ssh_port в ресурсе группы безопасности.

Но этого мало. Еще нужно создать "мост" между tf файлом и вашим перемнным окружения.
Это делается с помощью объявления пустой переменной в tf файле:

variable "ssh_port" {}

https://www.terraform.io/language/functions/file

Ну и отметим, что мы использовали скрипт в base64 кодировке, для установки
LEMP. За это отвечает параметр - user_data_base64 в ресурсе - aws_instance.

Так же важным моментом является то, что если мы изменим user data скрипт и запустим
apply снова, что terraform поймет, что измнился скрипт и пересоздаст ec2 instance.

$ terraform init

$ terraform plan

$ terraform apply

Не забываем, что удалить ресурсы вот так

$ terraform destroy

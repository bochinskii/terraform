------------
Remote State
------------

Мы уже говорили о том, что после команды apply, в директории с проектом создается
файл .terraform.tfstate, в котором описуется инфрастукрута, которая создана с помощью
terraform. При команде destroy, данный файл "очищается".

Понятное дело, что данный файл очень важен. Если его потерять, что придется
приложить кучу сил для того, чтобы продолжить управлять данной инфраструктурой
с помощью terraform (кстати, об этом мы поговорим позже).

Чтобы не потерять файл, его лучше всего поместить удаленно. Например, в s3 bucket.
Там будет надежней.

---------------------------------------------------------------------------------
Важно:

Если вы используете S3 или что-то подобное в зависимости от cloud провайдера, то
желательно включить versioning для объектов и шифрование.
--------------------------------------------------------------------------------

Но не только для этого нужен Remote State. Он так же нужен для того, чтобы
над одним и тем же проектом могли работать несколько человек. Т.к. данный файл будет
лежать в централизованном месте, то к ниму могут получить доступ несколько людей.

Еще один важный момент Remote State'а. Если над одним проектом работают несколько человек.
Каждый занимается своим куском работы. Например, кто-то делает VPC, а кто-то запускает
ec2 instances'ы, а кто-то занимается RDS. Им понадобятся изъять данные (data) из тех ресурсов,
которые созданы колегой. Если бы эти люди работали без Remote State это было бы не возможно.

----------------------------------------------------------------------------
Заметка:

Если вы используете Terraform Cloud, то там тоже можно хранить remote state.
----------------------------------------------------------------------------

https://www.terraform.io/language/state/remote-state-data

Рассмотрим настройку Remote State и "изъятие" информации из Remote State на примере.
Допустим, нам нужно создать VPC с подсетями. В данных подсетях запустить ec2 instance'ы.
Так же сделать балансировку нагрузки (ALB) на данные сервера. Remote State будем
делать на s3 bucket'е.

$ mkdir ./010_Remote_State; cd ./010_Remote_State

Как будет организован проект? Допустим VPC делает один человек (layer_1), а ec2 instances'ы
с группами безопасности конфигурирует другой человек (layer_2). За балансировку нагрузки
будет отвечать третий человек (layer_3).

$ mkdir ./{layer_1_vpc,Layer_2_ec2,Layer_3_alb}

Начнем с первого уровня.

$ cd ./layer_1_vpc

Файл main.tf описывать не будем. Мы уже подобное делали.

На данный момент нас интересует файл aws_provider.tf. В нем интересная вот эта часть

terraform {
  backend "s3" {
    bucket = "bochinskii-lemp-state"
    key    = "nginx/vpc/terraform.tfstate"
    region = "eu-central-1"
  }
  ...
}

Тут все просто. Мы заранее создали s3 bucket. Настроили там versioning и включили шифрование.
С помощью директивы backend (s3) мы указали все настройки s3 bucket'а.

https://www.terraform.io/language/settings/backends/s3

Еще один файл, который следует рассмотреть - outputs.tf.
Дело в том, что второй человек будет создавать ec2 instances'ы. А значит, ему нужно узнать
id подсетей, в которых будут распологаться instances'ы, а так же vpc id.

Каким же образом второй работник узнает эту информацию? С помощью outputs, которые
сделает первый работник. Вот в данном файле, мы сделали те outputs'ы, которые
понадобятся второму человеку.

Как это работает? Когда создасться инфраструктура 1-го уровня, то вся информация о ней
запишется в terraform.tfstate файл, который хранится на s3 bucket'е.

Второму работнику (да и третьему тоже), останется только импортировать информацию
из данного файла и использовать ее. Покажем это позже.



Пока запустим первый уровень.

Напоминаем, что предварительно мы создали s3 bucket. Как видим, он пустой.

$ aws s3 ls s3://bochinskii-lemp-state/ --recursive

$


$ export AWS_ACCESS_KEY_ID=<your access key id>
$ export AWS_SECRET_ACCESS_KEY=<your secret access key>


$ terraform init

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.14.0...
- Installed hashicorp/aws v4.14.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!
...

Как мы можем заметить из вывода выше. Наш backend сконфигурирован на s3 bucket.

$ terraform plan

$ terraform apply

...

Outputs:

env = "dev"
subnet_ids = [
  "subnet-07047ed1d47b1daf5",
  "subnet-07869f23cbfe360ee",
  "subnet-018fd272d947fb08f",
]
vpc_id = "vpc-06d0677a27c2c858b"

Из вывода высше мы видим, что все отработало и появились outputs'ы


Как видим, создался terraform.tfstate файл, по тому пути как мы описывали в backend'е

$ aws s3 ls s3://bochinskii-lemp-state/ --recursive
2022-05-19 16:49:08      16718 nginx/vpc/terraform.tfstate


Теперь, допустим, второй работник приступает к своей работе.

$ cd ../layer_2_ec2

Данный работник должен сделать два ec2 instance'а и группы безопасности.
Работник, тоже, должен хранить свой terraform.tfstate файл удаленно, поэтому мы
сделали похожую настройку в файлу aws_provider.tf.

terraform {
  backend "s3" {
    bucket = "bochinskii-lemp-state"
    key    = "nginx/ec2/terraform.tfstate"
    region = "eu-central-1"
  }
  ...
}

-------------------------------------------------------------------------------
Заметка:

В реальности так и делают. Создают один s3 bucket и terraform.tfstate файлы
каждого слоя (layer'а) хранят в разных ключах (путях).
-------------------------------------------------------------------------------

Для создания этого слоя работнику понадобится id подсетей, и vpc id, которые были
созданы на предыдущем слое. Как же данный работник может изъять данную информацию?
Да, мы это уже знаем, с помощью директивы data.

Мы создали для этих целей файл - import_remote_state.tf

data "terraform_remote_state" "vpc" {
  backend = "s3"

  config = {
    bucket = "bochinskii-lemp-state"
    key    = "nginx/vpc/terraform.tfstate"
    region = "eu-central-1"
  }
}

По факту, таким образом второй работник читает terraform.tfstate файл, который находится по
пути - nginx/vpc/terraform.tfstate. Естественно, в данном файле есть все outputs'ы,
которые были подготовлены на первом слое.

Но как именно обратиться к vpc id и id подсетей? Можно спросить у первого работника
о том, как он назвал свои outputs'ы. Можно посмотреть terraform.tfstate файл пройдя по
известному пути в s3 bucket'е. А можно вывести всю информацию и посмотреть.

output "vpc_backend" {
  value = data.terraform_remote_state.vpc
}

$ terraform init

$ terraform plan

Changes to Outputs:

  ...

  + vpc_backend     = {
      + backend   = "s3"
      + config    = {
          + bucket = "bochinskii-lemp-state"
          + key    = "nginx/vpc/terraform.tfstate"
          + region = "eu-central-1"
        }
      + defaults  = null
      + outputs   = {
          + env        = "dev"
          + subnet_ids = [
              + "subnet-07047ed1d47b1daf5",
              + "subnet-07869f23cbfe360ee",
              + "subnet-018fd272d947fb08f",
            ]
          + vpc_id     = "vpc-06d0677a27c2c858b"
        }
      + workspace = null
    }

Теперь второй работник знает как первый назвал необходимые outputs'ы к которым можно
обратиться.

Теперь можно закомментировать этот output, чтобы он не мешал:

output "vpc_backend" {
  value = data.terraform_remote_state.vpc
}

На примере покажем как можно обратиться к определенному output'у

resource "aws_security_group" "alb_sg" {
  ...
  vpc_id      = data.terraform_remote_state.vpc.outputs.vpc_id
  ...
}

Остальные tf файлы рассматривать не будем т.к. они лешкие, тем более мы уже делали
это ранее.

Нужно упомянуть, что второй работник тоже должен вывести определенные outputs'ы для
третьего слоя. Т.е. на третьем слое будет создаваться ALB, то ему понадобится
id созданных instances'ов, id определенной группы безопасности.

Так же третьему работнику понадобятся VPC id и id подсетей, но это он возьмет из
outputs'ов, которые сделал первый работник на первом слое.

Запустим

$ terraform apply

...

Outputs:

alb_sg_id = "sg-0ac2b6c19f8e17ba6"
instances_ids = [
  "i-04bfcc9b6ee737cd0",
  "i-04c2a7c0235bf8697",
]
nginx_public_ip = [
  "3.72.67.77",
  "18.194.207.240",
]


Посмотрим, появился ли terrafor.tfstate файл второго слоя

$ aws s3 ls s3://bochinskii-lemp-state --recursive
2022-05-20 08:45:59      22129 nginx/ec2/terraform.tfstate
2022-05-19 16:49:08      16718 nginx/vpc/terraform.tfstate


Теперь третий работник, может приступать к работа над третьим слоем.

Тут тоже настраиваем Remote State в файле aws_provider.tf

terraform {
  backend "s3" {
    bucket = "bochinskii-lemp-state"
    key    = "nginx/alb/terraform.tfstate"
    region = "eu-central-1"
  }
  ...
}

В фале import_remote_state.tf уже изъяты outputs'ы, которые были сделаны на
первом и втором слове.

data "terraform_remote_state" "vpc" {
  backend = "s3"

  config = {
    bucket = "bochinskii-lemp-state"
    key    = "nginx/vpc/terraform.tfstate"
    region = "eu-central-1"
  }
}

data "terraform_remote_state" "ec2" {
  backend = "s3"

  config = {
    bucket = "bochinskii-lemp-state"
    key    = "nginx/ec2/terraform.tfstate"
    region = "eu-central-1"
  }
}

Тут тоже можно сделать outputs'ы, чтобы понять как обращаться к данным

output "vpc_backend" {
  value = data.terraform_remote_state.vpc
}

output "ec2_backend" {
  value = data.terraform_remote_state.ec2
}

Все остальное должно быть предельно понятно.

$ terraform init

$ terraform plan

Changes to Outputs:

  ...

  + ec2_backend = {
      + backend   = "s3"
      + config    = {
          + bucket = "bochinskii-lemp-state"
          + key    = "nginx/ec2/terraform.tfstate"
          + region = "eu-central-1"
        }
      + defaults  = null
      + outputs   = {
          + alb_sg_id       = "sg-0ac2b6c19f8e17ba6"
          + instances_ids   = [
              + "i-04bfcc9b6ee737cd0",
              + "i-04c2a7c0235bf8697",
            ]
          + nginx_public_ip = [
              + "3.72.67.77",
              + "18.194.207.240",
            ]
          + vpc_backend     = {
              + backend   = "s3"
              + config    = {
                  + bucket = "bochinskii-lemp-state"
                  + key    = "nginx/vpc/terraform.tfstate"
                  + region = "eu-central-1"
                }
              + defaults  = null
              + outputs   = {
                  + env        = "dev"
                  + subnet_ids = [
                      + "subnet-07047ed1d47b1daf5",
                      + "subnet-07869f23cbfe360ee",
                      + "subnet-018fd272d947fb08f",
                    ]
                  + vpc_id     = "vpc-06d0677a27c2c858b"
                }
              + workspace = null
            }
        }
      + workspace = null
    }
  + vpc_backend = {
      + backend   = "s3"
      + config    = {
          + bucket = "bochinskii-lemp-state"
          + key    = "nginx/vpc/terraform.tfstate"
          + region = "eu-central-1"
        }
      + defaults  = null
      + outputs   = {
          + env        = "dev"
          + subnet_ids = [
              + "subnet-07047ed1d47b1daf5",
              + "subnet-07869f23cbfe360ee",
              + "subnet-018fd272d947fb08f",
            ]
          + vpc_id     = "vpc-06d0677a27c2c858b"
        }
      + workspace = null
    }

Тут тоже можно закомментировать данные outputs'ы, чтобы они не мешали в выводе

$ terraform apply

...

Outputs:

alb_dns = "alb-1894353826.eu-central-1.elb.amazonaws.com"


Посмотрим появился ли terraform.tfstate для третьего слоя

$ aws s3 ls s3://bochinskii-lemp-state/ --recursive
2022-05-20 09:21:37      19981 nginx/alb/terraform.tfstate
2022-05-20 09:15:50      22136 nginx/ec2/terraform.tfstate
2022-05-19 16:49:08      16718 nginx/vpc/terraform.tfstate

Ну и так далее. Таких слоев может быть много.


































------------------------------

----------------------------------------------------------------------
Инициализация проекта.
Создание, удаление и изменение ресурса в AWS на примере EC2 instance'а
----------------------------------------------------------------------

---------------------
Инициализация проекта
---------------------

Перед тем как начинать создавать ресурсы, мы должны понять как работает terraform.
При запуске на выполнение, terraform ищет все файлы с суффиксом - tf в рабочей директории.
В связи с этим для каждого проекта, нужно создать отдельную директорию,
где будут храниться все tf файлы проекта.

$ mkdir ./001_Create_AWS_EC2_instance; cd ./001_Create_AWS_EC2_instance

В terraform для начала, нужно описать провайдера в котором мы будем создавать ресурс.
У нас в качестве провайдера будет выступать AWS.

Как же описывать провайдера? Да и вообще как найти документацию о том как что-то делать для определенного провайдера?
Легко, нужно найти его на официальном сайте (https://registry.terraform.io/browse/providers) и посмотреть документацию.
Вот ссылка на документацию - https://registry.terraform.io/providers/hashicorp/aws/latest/docs

Создадим tf файл с описанием провайдера. Название может быть произвольное.
Тут довольно таки все понятно. Стоит только отметить, что с помощью shared_credentials_files
мы указываем путь к файлу с настройками доступа к AWS.
Данный файл создается когда вы пользуетесь AWS CLI.

********************************************************************************
Отсупление:
https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
По этой ссылке можно посмотреть как установить AWS CLI. После установки, нужно

$ aws configure

Далее, ввести актуальные ключи.

Вот подробней

https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html

********************************************************************************

$ touch ./aws_provider.tf

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {
  region = "eu-central-1"
  shared_credentials_files = ["~/.aws/credentials"]
  profile = "default"
}


Далее, инициализируем terraform проект

$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.13.0...
- Installed hashicorp/aws v4.13.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

$ ls -la
total 20
drwxrwxr-x 3 denisb denisb 4096 мая  7 08:53 .
drwxrwxr-x 5 denisb denisb 4096 мая  7 08:44 ..
-rw-rw-r-- 1 denisb denisb  210 мая  7 08:47 aws_provider.tf
drwxr-xr-x 3 denisb denisb 4096 мая  7 08:53 .terraform
-rw-r--r-- 1 denisb denisb 1152 мая  7 08:53 .terraform.lock.hcl

-------------------------------------------
Указать учетные данные с помощью переменных
-------------------------------------------

Отдельно стоит отметить, что мы использовали ~/.aws/credentials в качестве учетных
данных. Хочу показать еще один расспространенный способ, который более предпочтительный,
т.к. над tf файлом могут работать разные люди у которых, например файл ~/.aws/credentials
может называться по-другому или вообще отсувствовать.

Еще одним способом указания учетных данных - является объявление некоторых переменных.
Ну и конечно создание для terraform отдельного пользователя в AWS с ограниченными правами.


$ export AWS_ACCESS_KEY_ID=<your access key id>
$ export AWS_SECRET_ACCESS_KEY=<your secret access key>
$ export AWS_DEFAULT_REGION=<your default region>

При этом файл с описанием провайдера, в нашем случае - aws_provider.tf, будет
иметь другой вид

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {}

----------------------------------------
Создание ресурса (EC2 Instance'а)
----------------------------------------

Вот все параметры как создавать данный ресурс
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance

Создадим файл, в котором будем создавать ресурс. Название может быть произвольное.
Тут тоже должно быть все понятно

$ touch ./main.tf

resource "aws_instance" "my_amazon_linux" {
  ami = "ami-05f5f4f906feab6a7"
  instance_type = "t2.micro"

  key_name = "bochinskii_Frankfurt_2"

  vpc_security_group_ids = [
    "sg-004c28689f21a4a77",
    "sg-061ddb8453ccbf935"
  ]
  availability_zone = "eu-central-1a"
  subnet_id = "subnet-000c2008b7496a3b7"

  root_block_device {
    volume_type = "gp3"
    volume_size = 15
    delete_on_termination = true
  }

  tags = {
    Name = "my_amazon_linux"
    Owner = "Denis Bochinskii"
  }
}

Далее, проверим синтаксис и получим вывод, что terraform должен будет сделать.
На данном этапе можно все проверить и если вы ошиблись, то поправить определенные
tf файлы.

$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

...

Plan: 1 to add, 0 to change, 0 to destroy.

Далее, выполняем tf файлы

$ terraform apply

...

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.my_amazon_linux: Creating...
aws_instance.my_amazon_linux: Still creating... [10s elapsed]
aws_instance.my_amazon_linux: Still creating... [20s elapsed]
aws_instance.my_amazon_linux: Still creating... [30s elapsed]
aws_instance.my_amazon_linux: Still creating... [40s elapsed]
aws_instance.my_amazon_linux: Creation complete after 46s [id=i-0da179ee934358a97]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.


Вот какой файл - terraform.tfstate появился после того, как мы выполнили команду - apply.

$ ls -l
total 16
-rw-rw-r-- 1 denisb denisb  210 мая  7 08:47 aws_provider.tf
-rw-rw-r-- 1 denisb denisb  426 мая  7 10:37 main.tf
-rw-rw-r-- 1 denisb denisb 4236 мая  7 10:41 terraform.tfstate

В нем находится вся информация о том, что сделано в данный момент в данном проекте.
Поэтому если мы запустим команду apply снова, terraform выдаст информацио о том,
что ничего создавать не нужно. Напомню, что эту информацию он берет из файла -
terraform.tfstate. Теперь можно сделать вывод, что файл terraform.tfstate очень важен.

$ terraform apply
aws_instance.my_amazon_linux: Refreshing state... [id=i-01168c67a974a129e]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.


Давайте добавим еще одну кoнфигурацию ресурса в файл - main.tf. Создадим такой-же
ресурс, только в другой AZ

resource "aws_instance" "my_amazon_linux_2" {
  ami = "ami-05f5f4f906feab6a7"
  instance_type = "t2.micro"

  key_name = "bochinskii_Frankfurt_2"


  vpc_security_group_ids = [
    "sg-004c28689f21a4a77",
    "sg-061ddb8453ccbf935"
  ]
  availability_zone = "eu-central-1b"
  subnet_id = "subnet-0646580d441af171c"

  root_block_device {
    volume_type = "gp3"
    volume_size = 10
    delete_on_termination = true
  }

  tags = {
    Name = "my_amazon_linux"
    Owner = "Denis Bochinskii"
  }
}

$ terraform plan

Как мы видим, terrform знает, что ресурс my_amazon_linux уже создан,
а значит нужно создать только ресурс - my_amazon_linux_2. Таким образом у нас
запущены 2-а ec2 instance'а.

$ terraform apply

Plan: 1 to add, 0 to change, 0 to destroy.

...

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.my_amazon_linux_2: Creating...
aws_instance.my_amazon_linux_2: Still creating... [10s elapsed]
aws_instance.my_amazon_linux_2: Still creating... [20s elapsed]
aws_instance.my_amazon_linux_2: Still creating... [30s elapsed]
aws_instance.my_amazon_linux_2: Creation complete after 38s [id=i-046fcb00b46b64106]

*****************************************************************************************
Важно:
Если мы сейчас удалим файл - terraform.tfstate и запустим apply снова. то terraform
не будет знать о созданной им информатруктуре и начнет создавать эти два ресурса заново.
*****************************************************************************************


-----------------
Удаление ресурсов
-----------------


Один из вариантов - это удалить ненужный ресурс в tf файле. И запустить команду - apply.
Этот вариант хорошб, если вам нужно удалить определенный ресурс, который стал не нужен.

Удалим ресурс - my_amazon_linux_2 из main.tf файла

Теперь выполним команду plan.
Мы видим, что terrafom будет удалять ресурс my_amazon_linux_2

$ terraform plan
aws_instance.my_amazon_linux_2: Refreshing state... [id=i-046fcb00b46b64106]
aws_instance.my_amazon_linux: Refreshing state... [id=i-01168c67a974a129e]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.my_amazon_linux_2 will be destroyed
  # (because aws_instance.my_amazon_linux_2 is not in configuration)

  ...

Plan: 0 to add, 0 to change, 1 to destroy.

$ terraform apply

Ну, а что если не нужно изменять конфигурацию в tf файлах, но инфраструктуру нужно
удалить.

$ terraform destroy

Таким образом мы удалили все ресурсы описанные в tf файлах данного проекта (директории).

------------------
Изменение ресурсов
------------------

К этому времени уможе должно быть понятно, что изменять ресурсы можно изменяя код в
tf файлах, а потом выполнить команду - apply.




-------------------------------------------------

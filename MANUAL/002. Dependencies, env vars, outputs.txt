-----------------------------------------------
Зависимости и использование перемнных окружения
-----------------------------------------------

Создадим новый проект

$ mkdir ./002_Create_LEMP_file; cd ./002_Create_LEMP_file

Оставим "за кадром" создание конфигурации провайдера.

Экспортируем все необходимые переменные.

$ export AWS_ACCESS_KEY_ID=<your access key id>
$ export AWS_SECRET_ACCESS_KEY=<your secret access key>
$ export AWS_DEFAULT_REGION=<your default region>

Экспорт данной переменной, будет объяснен ниже.

$ export TF_VAR_ssh_port=<your custome ssh port number>

-----------
Зависимости
-----------

Существуют автоматические зависимости и не автоматические.

Автоматические зависимости посмотрим на примере создания LEMP сервера к которому будет "привязаны"
две новосозданные группы безопасности.

$ touch main.tf

Так как файл имеет внушительное количество содержимого, ознакомится с ним вы можете
в директории с проектом.

В tf файле мы сперва укзали ресур aws_instance, а потом ресурсы aws_security_group.
Тем не менее мы создали автоматическую зависимость между aws_instance и aws_security_group
путем указания - aws_security_group.my_lemp_web.id и aws_security_group.my_lemp_ssh.id:

vpc_security_group_ids = [
  aws_security_group.my_lemp_web.id,
  aws_security_group.my_lemp_ssh.id
]

т.е. terraform просканировал tf файл и выяснил, что есть зависимость между ресурсами и таким образом
сначала создал группы безопасности, а потом уже ресурс с ec2 instance'ом.

********************************************
Заметка:

Рассмотрим как мы указали группы безопаности на примере одной - aws_security_group.my_lemp_web.id.
Эта запись состоит из названия ресурса (aws_security_group), его имени (my_lemp_web)
и одентификационного номера (id).

На самом деле можно "забрать" не только id, но и некоторые другие параметры.
Их можно найти в документации.

Если посмотреть на документацию по AWS - https://registry.terraform.io/providers/hashicorp/aws/latest/docs
то можно заметить, что документация о AWS сервисах, подразделяется на:
- resources
- data source
В resources описывается документация и параметры ресурса, а в data source
описывается то, что можно получить в качетсве переменной от созданного ресурса.

Вот data source документация например для группы безопасности -
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/security_group
********************************************

Не автоматические зависимости рассмотрим без практики.

Они используются, когда нет возможности использовать автоматические.

Например, нужно создать три ec2 instance'а, но чтобы один из них (database) создался первый.
А еще один из них (web) должен создасться позже всех.

resource "aws_instance" "web" {
  ...
  depends_on = [
    aws_instance.database,
    aws_instance.application,
  ]

}

resource "aws_instance" "application" {
  ...
  depends_on = [
    aws_instance.database,
  ]

}

resource "aws_instance" "database" {
  ...

}

Таким образом terraform "увидит", что database не от кого не зависит и создасться
первым. Ресурс web зависит от двух ресурсов (database, application), поэтому он создастся
последним.

------------------------------------------
Использование перемнных окружения (TF_VAR)
------------------------------------------


https://www.terraform.io/language/values/variables

Далее, рассмотрим использование переменных окружения в tf файле.
Например, мы не захотели, чтобы в tf файле был показан
кастомный ssh порт. Как мы вышли из положения?

Как вы видели выше мы экспортровали вот такую переменную - TF_VAR_ssh_port,
в которой указали номер порта. Чтобы ее использовать в tf файле,
мы указали var.ssh_port в ресурсе группы безопасности.

Но этого мало. Еще нужно создать "мост" между tf файлом и вашим перемнным окружения.
Это делается с помощью объявления пустой переменной в tf файле:

variable "ssh_port" {}

https://www.terraform.io/language/functions/file

Ну и отметим, что мы использовали скрипт в base64 кодировке, для установки
LEMP. За это отвечает параметр - user_data_base64 в ресурсе - aws_instance.

Так же важным моментом является то, что если мы изменим user data скрипт и запустим
apply снова, что terraform поймет, что измнился скрипт и пересоздаст ec2 instance.


----------------------------------------------
Вывод на экран информации о ресурсах (outputs)
----------------------------------------------

https://www.terraform.io/language/values/outputs

https://www.terraform.io/cli/commands/output

Есть вещи, которые нужно вывести на экран после создания. На самом деле outputs
могут еще использоваться для того, чтобы их значение занести в переменные.

Сейчас мы рассмотрим, только вывод на экран. Зачем это может понадобится?
Вот в нашем примере мы создали LEMP. Теперь, нам нужно зайти по его
ip или dns. Можно воспользоваться AWS консолью. Но, что если у нас нет доступа
к консоли.

В файле ./outputs.tf находятся наши outputs'ы. Мы выведем публичный ip адрес,
публичный dns, ну и просто, выведем, arn ec2 instance'а.

Вот пример:

output "aws_instance_my_lemp_public_ip" {
  value = aws_instance.my_lemp.public_ip
}

aws_instance_my_lemp_public_ip - это произвольное имя output'а.

Эта конструкция нам известна:

value = aws_instance.my_lemp.public_ip

Напомню, что все данные, которые можно вывести можно найти в документации, в
разделе data sources. Или когда выполняете команду - plan. На экран выводится информация
о ресурсах. Все что там указано, можно вывести с помощью outputs'ов.


$ terraform init

$ terraform plan

$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:
...
Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_instance_my_lemp_arn        = (known after apply)
  + aws_instance_my_lemp_public_dns = (known after apply)
  + aws_instance_my_lemp_public_ip  = (known after apply)
  Do you want to perform these actions?
    Terraform will perform the actions described above.
    Only 'yes' will be accepted to approve.

    Enter a value: yes

aws_security_group.my_lemp_web: Creating...
aws_security_group.my_lemp_ssh: Creating...
aws_security_group.my_lemp_web: Creation complete after 7s [id=sg-052d8b7d369e8b024]
aws_security_group.my_lemp_ssh: Creation complete after 8s [id=sg-02fcde201a9e970af]
aws_instance.my_lemp: Creating...
aws_instance.my_lemp: Still creating... [10s elapsed]
aws_instance.my_lemp: Still creating... [20s elapsed]
aws_instance.my_lemp: Still creating... [30s elapsed]
aws_instance.my_lemp: Still creating... [40s elapsed]
aws_instance.my_lemp: Creation complete after 49s [id=i-0907327f3c5f837d1]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:
aws_instance_my_lemp_arn = "arn:aws:ec2:eu-central-1:880954070217:instance/i-0907327f3c5f837d1"
aws_instance_my_lemp_public_dns = "ec2-54-93-118-67.eu-central-1.compute.amazonaws.com"
aws_instance_my_lemp_public_ip = "54.93.118.67"


Как мы видим, после того, как ресурсы создались у нас на экране вывелись значения
"наших" outputs'ов.

Кстати, после того как выполнился apply мы можем посмотреть на наши otputs'ы
с помощью команды:

$ terraform output
aws_instance_my_lemp_arn = "arn:aws:ec2:eu-central-1:880954070217:instance/i-0907327f3c5f837d1"
aws_instance_my_lemp_public_dns = "ec2-54-93-118-67.eu-central-1.compute.amazonaws.com"
aws_instance_my_lemp_public_ip = "54.93.118.67"


Не забываем, что удалить ресурсы вот так

$ terraform destroy
